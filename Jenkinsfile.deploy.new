@Library('jenkins-pipeline-shared-libraries')_

deployProperties = [:]
pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }
    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')
        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build? Set if you are not on a multibranch pipeline.')
        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')
        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Optional if not RELEASE. If RELEASE, cannot be empty.')
    }
    environment {
        MAVEN_OPTS = '-Xms1024m -Xmx4g'
        BOT_CREDENTIALS_ID = "bsig-gh-bot"
    }
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')
        timeout(time: 120, unit: 'MINUTES')
    }
    stages {
        stage("Initialize") {
            steps {
                script {
                    if (params.DISPLAY_NAME != "") {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    if (env.BRANCH_NAME != "") {
                        // Switch to branch if not on a multibranch pipeline
                        env.BRANCH_NAME = getBuildBranch()
                    }
                    if (isRelease()) {
                        assert getProjectVersion() != ''
                    }
                    setDeployPropertyIfNeeded('git.branch', getBuildBranch())
                    setDeployPropertyIfNeeded('project.version', getProjectVersion())
                    setDeployPropertyIfNeeded('release', isRelease())
                }
            }
        }
        stage('Clone repositories') { 
            steps {
                cloneRepo("kogito-runtimes")
                cloneRepo("kogito-apps")
                cloneRepo("kogito-examples")
                cloneRepo("kogito-examples", "kogito-examples-persistence")
                cloneRepo("kogito-examples", "kogito-examples-events")
            }
        }
        stage('Prepare for PR'){
            when {
                expression { return isRelease() }
            }
            steps {
                prepareForPR("kogito-runtimes")
                prepareForPR("kogito-apps")
                prepareForPR("kogito-examples")
            }
        }
        stage('Setup Maven release config'){
            when {
                expression { return isRelease() }
            }
            steps {
                configFileProvider([configFile(fileId: '771ff52a-a8b4-40e6-9b22-d54c7314aa1e', targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){
                    sh "echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee kogito-{runtimes,apps,examples,examples-persistence}/.mvn/maven.config"
                }
            }
        }
        stage('Update project version'){
            when {
                expression { return getProjectVersion() != '' }
            }
            steps {
                dir("kogito-runtimes") {
                    script {
                        maven.mvnVersionsSet(getProjectVersion())
                        // Step needed to have runtimes artifacts into the local repository, in order to set apps version correctly
                        sh "mvn -B clean install -DskipTests"
                    }
                }
                dir("kogito-apps") {
                    script {
                        maven.mvnVersionsUpdateParentAndChildModules(getProjectVersion())
                    }
                }
                dir("kogito-examples") {
                    script {
                        maven.mvnVersionsSet(getProjectVersion())
                    }
                }
            }
        }
        stage('Build kogito-runtimes') {
            steps {
                mavenInstall("kogito-runtimes")
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-apps') {
            steps {
                mavenInstall("kogito-runtimes")
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-examples') {
            steps {
                mavenInstall("kogito-runtimes")
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-examples with persistence') {
            steps {
                dir("kogito-examples-persistence") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install -Ppersistence', false)
                    }
                }
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-examples with events') {
            steps {
                dir("kogito-examples-events") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install -Pevents', false)
                    }
                }
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Deploy artifacts') {
            steps {
                mavenDeploy("kogito-runtimes")
                mavenDeploy("kogito-apps")
                mavenDeploy("kogito-examples")
            }
        }
        stage('Get staging repository URL') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    def pipelineName = "Kogito Runtimes deploy pipeline"
                    withCredentials([string(credentialsId: "KOGITO_CI_EMAIL_TO", variable: 'ZULIP_EMAIL')]) {
                        emailext body: "${pipelineName} #${env.BUILD_NUMBER} is ready for release and needs the staging repository URL. Please provide it at: ${env.BUILD_URL}input",
                                 subject: "Release #${getBuildBranch()}",
                                 to: ZULIP_EMAIL
                    }
                    deployProperties["staging-repo.url"] = input(message: "Enter staging repository URL:", parameters: [string(name: 'STAGING_REPO_URL')])
                }
            }
        }
        stage('Create PR'){
            when {
                expression { return isRelease() }
            }
            steps {
                commitAndCreatePR("kogito-runtimes")
                commitAndCreatePR("kogito-apps")
                commitAndCreatePR("kogito-examples")
            }
        }
        stage('Get staging repository URL') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    def pipelineName = "Kogito Runtimes deploy pipeline"
                    withCredentials([string(credentialsId: "KOGITO_CI_EMAIL_TO", variable: 'ZULIP_EMAIL')]) {
                        emailext body: "${pipelineName} #${env.BUILD_NUMBER} is ready for release and needs the staging repository URL. Please provide it at: ${env.BUILD_URL}input",
                                 subject: "Release #${getBuildBranch()}",
                                 to: ZULIP_EMAIL
                    }
                    deployProperties["staging-repo.url"] = input(message: "Enter staging repository URL:", parameters: [string(name: 'STAGING_REPO_URL')])
                }
            }
        }
    }
    post {
        always {
            script {
                def propertiesStr = deployProperties.collect{ entry ->  "${entry.key}=${entry.value}" }.join("\n")
                writeFile(text: propertiesStr, file: "deployment.properties")
                archiveArtifacts(artifacts: "deployment.properties")
            }
            cleanWs()
        }
    }
}

void saveReports(boolean allowEmpty=false){
    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: allowEmpty
}

void cloneRepo(String repo, String dirName=repo) {
    dir(dirName) {
        checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false))
    }
}

void prepareForPR(String repo) {
    dir(repo) {
        githubscm.forkRepo(env.BOT_CREDENTIALS_ID)
        githubscm.createBranch(getProjectVersion())
    }
}

void addNotIgnoredPoms() {
    // based on https://stackoverflow.com/a/59888964/8811872
    sh '''
    find . -type f -name 'pom.xml' > found_poms.txt
    poms_to_add=""
    while IFS= read -r pom; do
        if ! git check-ignore -q "\$pom"; then
            poms_to_add="\$poms_to_add \$pom"
        fi
    done < found_poms.txt
    rm found_poms.txt
    git add \$poms_to_add
    '''
}

void commitAndCreatePR(String repo) {
    def commitMsg = "Update project version to ${getProjectVersion()} for release"
    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"
    // Not using githubscm.commitChanges() because globbing won't work.
    // See: https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449268738
    dir(repo) {
        addNotIgnoredPoms()
        sh "git commit -m '${commitMsg}'"
        githubscm.pushObject("origin", getProjectVersion(), env.BOT_CREDENTIALS_ID)
        deployProperties["${repo}.pr.link"] = githubscm.createPR(commitMsg, prBody, getBuildBranch(), env.BOT_CREDENTIALS_ID)
    }
}

boolean isRelease() {
    return params.RELEASE
}

String getGitAuthor(){
    return params.GIT_AUTHOR
}

String getBuildBranch(){
    return params.BUILD_BRANCH_NAME
}

String getProjectVersion(){
    return params.PROJECT_VERSION
}

void setDeployPropertyIfNeeded(String key, def value){
    if (value != null && value != ""){
        deployProperties[key] = value
    }
}

void mavenInstall(String directory, boolean skipTests = false, String... profiles) {
    installCmd = 'clean install'
    if(profiles.length > 0){
        installCmd += " -P${profiles.join(',')}"
    }
    dir(directory) {
        maven.runMavenWithSubmarineSettings(installCmd, skipTests)
    }
}

void mavenDeploy(String directory) {
    deployCmd = 'clean deploy'
    if(params.MAVEN_DEPLOY_REPOSITORY != ''){
        deployCmd += " -DaltDeploymentRepository=runtimes-artifacts::default::${params.MAVEN_DEPLOY_REPOSITORY}"
    }
    dir(directory) {
        maven.runMavenWithSubmarineSettings(deployCmd, true)
    }
}

